# serverless.yml

# --------------------------------------------------------------------------
# 1. Service Definition
# --------------------------------------------------------------------------
# The name of your serverless service. This will form part of the CloudFormation
# stack name and resource names in AWS.
service: email-order-confirmation-service

# --------------------------------------------------------------------------
# 2. Provider Configuration
# --------------------------------------------------------------------------
# Defines the cloud provider (AWS), runtime, region, and global settings for
# your functions within this service.
provider:
  name: aws                # Specifies AWS as the cloud provider
  runtime: python3.9       # The Python runtime version for your Lambda function
  region: us-east-1        # The AWS region where your Lambda will be deployed
                           # Make sure this matches your 'aws configure' default region.
  memorySize: 128          # Optional: Amount of memory (in MB) allocated to your Lambda (default is 128)
  timeout: 30              # Optional: Maximum execution time for your Lambda (in seconds, default is 30)

  # --- Environment Variables ---
  # These variables are made available to your Lambda function at runtime via os.environ.get()
  environment:
    AWS_REGION: ${self:provider.region} # Dynamically sets region from provider config
    # IMPORTANT: Replace 'your-verified-sender@example.com' with the email
    # address you have VERIFIED in your AWS SES console.
    SES_SOURCE_EMAIL: shaikhuzair961@gmail.com # <-- YOUR VERIFIED SES EMAIL HERE

  # --- IAM Role and Permissions ---
  # This section defines the IAM permissions that the Lambda function will
  # have when it executes. The Serverless Framework automatically creates
  # an IAM Role for your service and attaches these permissions.
  iam:
    role:
      statements:
        # Allows the Lambda function to send emails via SES
        - Effect: "Allow"
          Action:
            - "ses:SendEmail"
          # For better security, you can restrict the resource to your verified identity ARN:
          # Resource: "arn:aws:ses:${self:provider.region}:${aws:accountId}:identity/your-verified-sender@example.com"
          # For now, "*" is fine for learning, but be aware it means "any SES resource".
          Resource: "*"

        # Allows the Lambda function to write logs to CloudWatch Logs (highly recommended for debugging)
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: "arn:aws:logs:${self:provider.region}:${aws:accountId}:log-group:/aws/lambda/*:*"

# --------------------------------------------------------------------------
# 3. Functions Definition
# --------------------------------------------------------------------------
# Defines your individual AWS Lambda functions within this service.
functions:
  # This is the logical name for your function within this serverless.yml.
  # It's a convenient handle for you when running Serverless commands.
  sendOrderConfirmationEmail:
    # `handler` specifies the file and function name that Serverless Framework should execute.
    # Format: `filename.function_name`
    # In your case, `lambda_function.py` contains the `lambda_handler` function.
    handler: lambda_function.lambda_handler
    # `name` is the actual name the Lambda function will have in the AWS Console.
    # IMPORTANT: This must match the LAMBDA_FUNCTION_NAME in your Flask app's .env file.
    name: OrderConfirmationEmailSender # <--- Ensure this matches Flask's LAMBDA_FUNCTION_NAME

# --------------------------------------------------------------------------
# 4. Plugins (Optional but Recommended for Python)
# --------------------------------------------------------------------------
# Plugins extend the functionality of the Serverless Framework.
# `serverless-python-requirements` automatically bundles dependencies from requirements.txt
# and includes them in your deployment package.
plugins:
  - serverless-python-requirements

# --- Custom Plugin Configuration ---
custom:
  pythonRequirements:
    # If you're deploying from a non-Linux OS (e.g., Windows, macOS) and your
    # dependencies include compiled binaries (like numpy), set this to `true`.
    # It uses Docker to build the package in a Linux environment.
    dockerizePip: false # Set to true if you have complex non-pure Python packages or issues
    # If dockerizePip is true, ensure Docker Desktop is running on your machine.